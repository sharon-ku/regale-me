{"version":3,"file":"NodeCanvasElement.js","sources":["../../src/adapter/NodeCanvasElement.ts"],"sourcesContent":["/* eslint-disable dot-notation */\n/* eslint-disable func-names */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\nimport canvasModule from 'canvas';\nimport createGLContext from 'gl';\nimport { utils } from '@pixi/core';\n\nimport type { JpegConfig, NodeCanvasRenderingContext2DSettings, PdfConfig, PngConfig } from 'canvas';\nimport type { ContextIds, ICanvas } from '@pixi/core';\n\nconst { Canvas, CanvasRenderingContext2D, Image } = canvasModule;\n\nfunction putImageData(gl: WebGLRenderingContext, canvas: NodeCanvasElement)\n{\n    const { width, height } = canvas;\n\n    const ctx = canvas['_ctx'] as CanvasRenderingContext2D;\n\n    const data = ctx.getImageData(0, 0, width, height);\n\n    const pixels = new Uint8Array(width * height * 4);\n\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\n    for (let i = 0; i < height; i++)\n    {\n        for (let j = 0; j < width; j++)\n        {\n            const col = j;\n            const row = height - i - 1;\n\n            for (let k = 0; k < 4; k++)\n            {\n                const idx = (4 * ((row * width) + col)) + k;\n                const idx2 = (4 * ((i * width) + col)) + k;\n\n                data.data[idx] = pixels[idx2];\n            }\n        }\n    }\n\n    ctx.putImageData(data, 0, 0);\n\n    return ctx;\n}\n\ntype TempCtx = WebGLRenderingContext & {\n    canvas: NodeCanvasElement\n};\n\n/**\n * A node implementation of a canvas element.\n * Uses node-canvas and gl packages to provide the same\n * functionality as a normal HTMLCanvasElement.\n * @class\n * @memberof PIXI\n */\nexport class NodeCanvasElement extends canvasModule.Canvas implements ICanvas\n{\n    public style: Record<string, any>;\n    private _gl: WebGLRenderingContext;\n    private _event: utils.EventEmitter;\n    private _contextType: ContextIds;\n    private _ctx: CanvasRenderingContext2D | WebGLRenderingContext;\n\n    constructor(width = 1, height = 1, type?: 'image' | 'pdf' | 'svg')\n    {\n        super(width, height, type);\n        this._event = new utils.EventEmitter();\n        this.style = {};\n    }\n\n    // @ts-expect-error - overriding width to be a getter/setter\n    get width()\n    {\n        return super['width'];\n    }\n\n    set width(value)\n    {\n        if (this._gl)\n        {\n            const ext = this._gl.getExtension('STACKGL_resize_drawingbuffer');\n\n            ext.resize(value, this.height);\n        }\n        super['width'] = value;\n    }\n\n    // @ts-expect-error - overriding height to be a getter/setter\n    get height()\n    {\n        return super['height'];\n    }\n\n    set height(value)\n    {\n        if (this._gl)\n        {\n            const ext = this._gl.getExtension('STACKGL_resize_drawingbuffer');\n\n            ext.resize(this.width, value);\n        }\n        super['height'] = value;\n    }\n\n    get clientWidth()\n    {\n        return super['width'];\n    }\n\n    get clientHeight()\n    {\n        return super['height'];\n    }\n\n    /**\n     * Internal method to update the context before drawing.\n     * @private\n     */\n    public _updateCtx()\n    {\n        const gl = this._gl;\n\n        if (gl)\n        {\n            putImageData(gl, this);\n        }\n\n        return this._ctx;\n    }\n\n    // @ts-expect-error - overriding getContext\n    override getContext(\n        type: ContextIds,\n        options?: NodeCanvasRenderingContext2DSettings | WebGLContextAttributes\n    ): CanvasRenderingContext2D | WebGLRenderingContext | null\n    {\n        switch (type)\n        {\n            case '2d':\n            {\n                if (this._contextType && this._contextType !== '2d') return null;\n                if (this._ctx) return this._ctx;\n\n                this._ctx = super.getContext('2d', options as NodeCanvasRenderingContext2DSettings);\n                this._contextType = '2d';\n\n                return this._ctx;\n            }\n            case 'webgl':\n            case 'experimental-webgl':\n            {\n                if (this._contextType && this._contextType !== 'webgl') return null;\n                if (this._gl) return this._gl;\n\n                const { width, height } = this;\n\n                this._ctx = super.getContext('2d', options as NodeCanvasRenderingContext2DSettings);\n                const ctx = createGLContext(width, height, options as WebGLContextAttributes) as TempCtx;\n                const _getUniformLocation = ctx.getUniformLocation;\n\n                type Program = WebGLProgram & {_uniforms: any[]};\n                // Temporary fix https://github.com/stackgl/headless-gl/issues/170\n                ctx.getUniformLocation = function (program: Program, name)\n                {\n                    if (program._uniforms && !(/\\[\\d+\\]$/).test(name))\n                    {\n                        const reg = new RegExp(`${name}\\\\[\\\\d+\\\\]$`);\n\n                        for (let i = 0; i < program._uniforms.length; i++)\n                        {\n                            const _name = program._uniforms[i].name;\n\n                            if (reg.test(_name))\n                            {\n                                name = _name;\n                            }\n                        }\n                    }\n\n                    return _getUniformLocation.call(this, program, name);\n                };\n\n                (ctx as any).canvas = this as NodeCanvasElement;\n                const _texImage2D = ctx.texImage2D;\n\n                ctx.texImage2D = function (...args: any)\n                {\n                    let pixels = args[args.length - 1];\n\n                    if (pixels?._image) pixels = pixels._image;\n                    if (pixels instanceof Image)\n                    {\n                        const canvas = new Canvas(pixels.width, pixels.height);\n\n                        canvas.getContext('2d').drawImage(pixels, 0, 0);\n                        args[args.length - 1] = canvas;\n                    }\n\n                    return _texImage2D.apply(this, args);\n                };\n                this._gl = ctx;\n                this._contextType = 'webgl';\n\n                return this._gl;\n            }\n            default: return null;\n        }\n    }\n\n    /**\n     * For image canvases, encodes the canvas as a PNG. For PDF canvases,\n     * encodes the canvas as a PDF. For SVG canvases, encodes the canvas as an\n     * SVG.\n     */\n    toBuffer(cb: (err: Error | null, result: Buffer) => void): void;\n    toBuffer(cb: (err: Error | null, result: Buffer) => void, mimeType: 'image/png', config?: PngConfig): void;\n    toBuffer(cb: (err: Error | null, result: Buffer) => void, mimeType: 'image/jpeg', config?: JpegConfig): void;\n    /**\n     * For image canvases, encodes the canvas as a PNG. For PDF canvases,\n     * encodes the canvas as a PDF. For SVG canvases, encodes the canvas as an\n     * SVG.\n     */\n    toBuffer(): Buffer;\n    toBuffer(mimeType: 'image/png', config?: PngConfig): Buffer;\n    toBuffer(mimeType: 'image/jpeg', config?: JpegConfig): Buffer;\n    toBuffer(mimeType: 'application/pdf', config?: PdfConfig): Buffer;\n    /**\n     * Returns the unencoded pixel data, top-to-bottom. On little-endian (most)\n     * systems, the array will be ordered BGRA; on big-endian systems, it will\n     * be ARGB.\n     */\n    toBuffer(mimeType: 'raw'): Buffer;\n    /**\n     * Returns a buffer of the canvas contents.\n     * @param args - the arguments to pass to the toBuffer method\n     */\n    public toBuffer(...args: any): Buffer\n    {\n        const gl = this._gl;\n\n        if (gl)\n        {\n            putImageData(gl, this);\n        }\n\n        // @ts-expect-error - overriding toBuffer\n        return super.toBuffer(...args);\n    }\n\n    /** Defaults to PNG image. */\n    toDataURL(): string;\n    toDataURL(mimeType: 'image/png'): string;\n    toDataURL(mimeType: 'image/jpeg', quality?: number): string;\n    /** _Non-standard._ Defaults to PNG image. */\n    toDataURL(cb: (err: Error | null, result: string) => void): void;\n    /** _Non-standard._ */\n    toDataURL(mimeType: 'image/png', cb: (err: Error | null, result: string) => void): void;\n    /** _Non-standard._ */\n    toDataURL(mimeType: 'image/jpeg', cb: (err: Error | null, result: string) => void): void;\n    /** _Non-standard._ */\n    toDataURL(mimeType: 'image/jpeg', config: JpegConfig, cb: (err: Error | null, result: string) => void): void;\n    /** _Non-standard._ */\n    toDataURL(mimeType: 'image/jpeg', quality: number, cb: (err: Error | null, result: string) => void): void;\n    /**\n     * Returns a base64 encoded string representation of the canvas.\n     * @param args - The arguments to pass to the toDataURL method.\n     */\n    public toDataURL(...args: any): string\n    {\n        const gl = this._gl;\n\n        if (gl)\n        {\n            putImageData(gl, this);\n        }\n\n        // @ts-expect-error - overriding toDataURL\n        return super.toDataURL(...args);\n    }\n\n    /**\n     * Adds the listener for the specified event.\n     * @param type - The type of event to listen for.\n     * @param listener - The callback to invoke when the event is fired.\n     */\n    addEventListener(type: string, listener: (...args: any[]) => void)\n    {\n        return this._event.addListener(type, listener);\n    }\n\n    /**\n     * Removes the listener for the specified event.\n     * @param type - The type of event to listen for.\n     * @param listener - The callback to invoke when the event is fired.\n     */\n    removeEventListener(type: string, listener: (...args: any[]) => void)\n    {\n        if (listener)\n        {\n            return this._event.removeListener(type, listener);\n        }\n\n        return this._event.removeAllListeners(type);\n    }\n\n    /**\n     * Dispatches the specified event.\n     * @param event - The event to emit.\n     * @param event.type - The type of event.\n     */\n    dispatchEvent(event: {type: string, [key: string]: any})\n    {\n        event.target = this;\n\n        return this._event.emit(event.type, event);\n    }\n}\n\nconst _drawImage = CanvasRenderingContext2D.prototype.drawImage;\n\n// We hack the drawImage method to make it work with our custom Canvas, ensuring that the context is updated before we draw\n// eslint-disable-next-line func-names\nCanvasRenderingContext2D.prototype.drawImage = function (img: any, ...args: any)\n{\n    const _img = img as NodeCanvasElement;\n\n    // call ctx to sync image data\n    if (img instanceof Canvas && _img['_gl']) _img._updateCtx();\n\n    return _drawImage.call(this, img, ...args);\n};\n"],"names":["canvasModule","utils","createGLContext"],"mappings":"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"}