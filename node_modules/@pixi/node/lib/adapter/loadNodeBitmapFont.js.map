{"version":3,"file":"loadNodeBitmapFont.js","sources":["../../src/adapter/loadNodeBitmapFont.ts"],"sourcesContent":["import type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport type { IBitmapFontRawData } from '@pixi/text-bitmap';\nimport { BitmapFont, BitmapFontData, TextFormat, XMLStringFormat } from '@pixi/text-bitmap';\nimport { parseStringPromise } from 'xml2js';\n\ninterface XMLRawJson\n{\n    font: {\n        info: Array<{$: IBitmapFontRawData['info'][0]}>,\n        common: Array<{$: IBitmapFontRawData['common'][0]}>,\n        pages: Array<{page: [{ $: IBitmapFontRawData['page'][0]}]}>\n        chars: Array<{$: {count: number}, char: [{ $: IBitmapFontRawData['char'][0]}]}>\n        kernings?: Array<{$: {count: number}, kerning: [{ $: IBitmapFontRawData['kerning'][0]}]}>\n        distanceField?: Array<{$: IBitmapFontRawData['distanceField'][0]}>,\n    }\n}\n\n/**\n * Parses a xml json into a BitmapFontData object.\n * @param xml - The xml data to parse.\n */\nfunction xmlJsonParser(xml: XMLRawJson)\n{\n    const data = new BitmapFontData();\n    const font = xml.font;\n    const info = font.info;\n    const common = font.common;\n    const pages = font.pages;\n    const chars = font.chars;\n    const kernings = font.kernings;\n    const distanceField = font.distanceField;\n\n    info.forEach((element) =>\n    {\n        data.info.push({\n            face: element.$.face,\n            size: parseInt(element.$.size, 10),\n        });\n    });\n\n    common.forEach((element) =>\n    {\n        data.common.push({\n            lineHeight: parseInt(element.$.lineHeight, 10)\n        });\n    });\n\n    pages.forEach((element) =>\n    {\n        element.page.forEach((page) =>\n        {\n            data.page.push({\n                id: parseInt(page.$.id, 10),\n                file: page.$.file,\n            });\n        });\n    });\n\n    chars.forEach((info) =>\n    {\n        const charArr = info.char;\n\n        charArr.forEach((char) =>\n        {\n            data.char.push({\n                id: parseInt(char.$.id, 10),\n                page: parseInt(char.$.page, 10),\n                x: parseInt(char.$.x, 10),\n                y: parseInt(char.$.y, 10),\n                width: parseInt(char.$.width, 10),\n                height: parseInt(char.$.height, 10),\n                xoffset: parseInt(char.$.xoffset, 10),\n                yoffset: parseInt(char.$.yoffset, 10),\n                xadvance: parseInt(char.$.xadvance, 10),\n            });\n        });\n    });\n\n    kernings?.forEach((info) =>\n    {\n        info.kerning?.forEach((kerning) =>\n            data.kerning.push({\n                first: parseInt(kerning.$.first, 10),\n                second: parseInt(kerning.$.second, 10),\n                amount: parseInt(kerning.$.amount, 10),\n            })\n        );\n    });\n\n    distanceField?.forEach((df) =>\n    {\n        data.distanceField.push({\n            distanceRange: parseInt(df.$.distanceRange, 10),\n            fieldType: df.$.fieldType,\n        });\n    });\n\n    return data;\n}\n\n/**\n * Does the actual loading of the bitmap font data.\n * @param src - The url of the font file.\n * @param data - The bitmap font data for the file.\n * @param loader - The loader instance.\n */\nasync function _loadBitmap(src: string, data: BitmapFontData, loader: Loader)\n{\n    const pages = data.page;\n\n    const textureUrls = [];\n\n    for (let i = 0; i < pages.length; ++i)\n    {\n        const pageFile = pages[i].file;\n        const url = utils.path.join(utils.path.dirname(src), pageFile);\n\n        textureUrls.push(url);\n    }\n\n    const loadedTextures = await loader.load(textureUrls) as Record<string, Texture>;\n    const textures = textureUrls.map((url) => loadedTextures[url]);\n\n    return BitmapFont.install(data, textures, true);\n}\n\n/**\n * Checks if the given string is an xml string.\n * Performs the same check as the XMLStringFormat/XMLFormat class.\n * @param data - the string data to test.\n */\nasync function xmlStringFormatTest(data: string): Promise<boolean>\n{\n    if (typeof data === 'string' && data.includes('<font>'))\n    {\n        const xml = xmlJsonParser(await parseStringPromise(data));\n\n        return xml.page.length > 0 && xml.info[0].face !== null;\n    }\n\n    return false;\n}\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadNodeBitmapFont = {\n    extension: ExtensionType.LoadParser,\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url));\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        const isText = TextFormat.test(data);\n        const isXMLText = await xmlStringFormatTest(data);\n\n        return isText || isXMLText;\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const isText = TextFormat.test(asset);\n\n        if (isText)\n        {\n            const parsed = TextFormat.parse(asset);\n\n            return await _loadBitmap(data.src, parsed, loader);\n        }\n\n        return await _loadBitmap(data.src, XMLStringFormat.parse(asset), loader);\n    },\n\n    async load(url: string, _asset: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        const text = await response.text();\n\n        const data = xmlJsonParser(await parseStringPromise(text));\n\n        return await _loadBitmap(url, data, loader);\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadNodeBitmapFont);\n"],"names":["BitmapFontData","utils","BitmapFont","parseStringPromise","ExtensionType","TextFormat","XMLStringFormat","settings","extensions"],"mappings":"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"}